import { GoogleGenAI, Modality, Chat } from "@google/genai";
import { ChatMessage } from "../types";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = (base64: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64.split(',')[1],
      mimeType,
    },
  };
};

export const generateMergedImage = async (
  youngerImageBase64: string,
  olderImageBase64: string,
  userPrompt: string
): Promise<string> => {

  const youngerMimeType = youngerImageBase64.split(';')[0].split(':')[1];
  const olderMimeType = olderImageBase64.split(';')[0].split(':')[1];

  const youngerImagePart = fileToGenerativePart(youngerImageBase64, youngerMimeType);
  const olderImagePart = fileToGenerativePart(olderImageBase64, olderMimeType);
  
  const detailedPrompt = `
    You are an expert photo editor. Your task is to merge the two provided images into a single, cohesive photograph.
    - The first image is of a person when they were younger.
    - The second image is of the same person, but older.
    Create a new image where the younger self and the older self are together in the same scene. They should look natural, as if they are interacting or posing for a photo together.
    The scene should be: "${userPrompt}".
    Ensure both individuals are clearly visible and recognizable from their original photos. Maintain a realistic and consistent art style throughout the image.
  `;
  
  const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
            youngerImagePart,
            olderImagePart,
            { text: detailedPrompt }
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
  });

  for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
          const base64ImageBytes: string = part.inlineData.data;
          const mimeType = part.inlineData.mimeType;
          return `data:${mimeType};base64,${base64ImageBytes}`;
      }
  }

  throw new Error('No image was generated by the API.');
};


let chat: Chat | null = null;

const initializeChat = () => {
    if (!chat) {
        chat = ai.chats.create({
            model: 'gemini-2.5-flash',
            // FIX: Initialize chat with the welcome message to match the UI state.
            history: [
                {
                    role: 'model',
                    parts: [{ text: 'Hello! Need help crafting the perfect scene for your photo? Just ask!' }]
                }
            ],
            config: {
                systemInstruction: "You are a creative assistant helping users brainstorm prompts for an image generation AI. The goal is to merge a photo of a person's younger self with their older self. Suggest creative backgrounds, styles, and detailed scene descriptions. Be concise and inspiring. When you provide a full prompt suggestion, wrap it in double asterisks, like **this**.",
            },
        });
    }
    return chat;
}


export const chatWithAI = async (history: ChatMessage[], newMessage: string): Promise<string> => {
    const chatInstance = initializeChat();
    // Since we maintain the chat instance, we just need to send the new message.
    // The Gemini `chat` object maintains history automatically.
    // The history is now correctly initialized in `initializeChat`.
    
    // FIX: The logic to manually set history was removed as it accessed a private property (`.history`) and was unreliable.
    // The stateful `chat` instance now correctly manages the conversation history.

    // FIX: Pass an object to sendMessage as per API guidelines to fix assignment error.
    const result = await chatInstance.sendMessage({ message: newMessage });
    return result.text;
};
